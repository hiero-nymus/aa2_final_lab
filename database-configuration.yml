---
- name: Deploy, configure, and populate Postgres 12
  hosts: database_servers
  become: true
  gather_facts: false
  tags:
    - database_servers
  vars:
    #postgres_rhel7_repo: "https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    postgres_rhel8_repo: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
    postgresql_module: "postgresql:12"
    postgres_packages:
    #  - postgresql 
    #  - postgresql-server 
    #  - postgresql-contrib 
      - postgresql12-libs
      - postgresql12-devel
    #postgres_library: python-psycopg2
    postgres_library: python3-psycopg2
    postgres_12_data_dir: /var/lib/pgsql
    postgres_12_bin_path: /usr/bin
    postgres_service: postgresql.service
    postgres_port: 5432
    postgres_user: postgres
    postgres_users:
      - name: flask
        password: redhat
        database: flask_db
        state: present
        priv: ALL
    postgres_databases:
      - name: flask_db
        owner: flask
      - name: books_store
        owner: flask

  tasks:

    - name: Import a key from a URL
      ansible.builtin.rpm_key:
        state: present
        key: "https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG-12"
   
    - name: Enable PostgreSQL 12 Module
      command: dnf module enable -y postgresql:12

    - name: Installing PostgreSQL 12
      command: dnf install -y @postgresql:12

#     - name: Install Postgres packages
#       package:
#         name: "{{ __package }}"
#         state: present
#       loop: 
# #        - "{{ postgres_rhel8_repo }}"        
#         - "{{ postgres_packages }}"
# #        - "{{ postgres_library }}"
#       loop_control:
#         loop_var: __package

    - name: Check if Postgres initialized
      stat:
        path: "{{ postgres_12_data_dir }}/PG_VERSION"
      register: r_postgres_init_dir_state

    - when: not r_postgres_init_dir_state.stat.exists
      name: Run Postgres initdb to initialize if postgres not initialized
      command: "{{ postgres_12_bin_path }}/postgresql-setup initdb"
      notify: restart_postgres

    - name: Setup Postgres for remote password auth
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgres_12_data_dir }}/pg_hba.conf"
      notify: restart_postgres

    - name: Setup Postgres to listen on network interfaces
      lineinfile:
        dest: "{{ postgres_12_data_dir }}/postgresql.conf"
        line: "listen_addresses = '*'"
        insertafter: "#listen_addresses"
      notify: restart_postgres

    - name: Setup Postgres as started and enabled on boot.
      service:
        name: "{{ postgres_service }}"
        state: "{{ postgres_service_state | default('started') }}"
        enabled: "{{ postgres_service_enabled | default(true) }}"

    - name: Configure Postgres resources, user, database etc 
      block:

        - name: Setup Postgres database(s) 
          postgresql_db:
            name: "{{ __database.name }}"
            state: "{{ __database.state | default('present') }}"
          loop: "{{ postgres_databases }}"
          loop_control:
            loop_var: __database

        - name: Create Postgres user#(s) 
          postgresql_user:
            name: "{{ __user.name }}"
            password: "{{ __user.password | default(omit) }}"
            encrypted: true # "{{ __user.encrypted | default(omit) }}"
            priv: "{{ __user.priv | default(omit) }}"
            db: "{{ __user.database | default(omit) }}"
            # role_attr_flags: "{{ __user.role_attr_flags | default(omit) }}"
            state: "{{ __user.state | default('present') }}"
          loop: "{{ postgres_users }}"
          loop_control:
            loop_var: __user
          no_log: "{{ postgres_user_no_log_state | default(false) }}" 


      become_user: "{{ postgres_user }}"

  handlers:

    - name: restart_postgres
      service:
        name: "{{ postgres_service }}"
        state: restarted
